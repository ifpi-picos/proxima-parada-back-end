// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String          @id @unique @default(uuid())
    name          String
    email         String          @unique
    password      String
    phone_number  String?         @unique
    occupation    String
    avatar        String?         @unique
    status        Boolean?        @default(false)
    level         Boolean?        @default(false)
    created_at    DateTime        @default(now())
    updated_at    DateTime        @default(now())
    Vehicle       Vehicle[]
    StatusRequest StatusRequest[]
    Publication   Publication[]

    @@map("users")
}

model UserToken {
    user_tokenId String   @id @unique @default(uuid())
    token        String   @default(uuid())
    user_id      String   @unique
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now())

    @@map("user_token")
}

model AdminUser {
    id         String   @id @unique @default(uuid())
    name       String
    email      String   @unique
    password   String
    level      Boolean? @default(true)
    created_at DateTime @default(now())
    updated_at DateTime @default(now())

    @@map("admin_users")
}

model Vehicle {
    id      String  @id @unique @default(uuid())
    brand   String
    model   String
    avatar  String? @unique
    id_user String  @unique
    user    User    @relation(fields: [id_user], references: [id])

    @@map("vehicles")
}

model StatusRequest {
    id         String   @id @unique @default(uuid())
    status     Boolean? @default(false)
    readed     Boolean? @default(false)
    id_user    String   @unique
    user       User     @relation(fields: [id_user], references: [id])
    created_at DateTime @default(now())
    updated_at DateTime @default(now())

    @@map("status_request")
}

model Address {
    id                 String       @id @unique @default(uuid())
    city               String
    district           String
    road               String
    number             String
    longitude          String
    latitude           String
    OriginAddress      Publication? @relation("OriginAddress")
    DestinationAddress Publication? @relation("DestinationAddress")

    @@map("address")
}

model Publication {
    id                  String   @id @unique @default(uuid())
    id_user             String
    User                User     @relation(fields: [id_user], references: [id])
    departure_date      DateTime @default(now())
    origin_address      String   @unique
    OriginAddress       Address  @relation(fields: [origin_address], references: [id], name: "OriginAddress")
    destination_address String   @unique
    DestinationAddress  Address  @relation(fields: [destination_address], references: [id], name: "DestinationAddress")
    statusPublication   Boolean  @default(true)
    regular             Boolean
    vacancies           String
    modality            String

    @@map("publication")
}
